# Move json to 
.Neo4jDesktop\neo4jDatabases\database-a46faeaf-430e-4c9c-855b-36dee9b2e575\installation-4.1.0\import\

# Delete everything
MATCH (n)
DETACH DELETE n


# View computers
CALL apoc.load.json("file:///0001-computers.json") YIELD value RETURN value;


# Load computers and set tier
CALL apoc.load.json("file:///0001-computers.json") YIELD value
UNWIND value.computers AS computer
MERGE (c:Computer {sid:computer.SID})
ON CREATE SET c.tier = computer.tier


# Load computers and set all simple properties
MATCH (n) DETACH DELETE n;

CALL apoc.load.json("file:///0001-computers.json") YIELD value
UNWIND value.computers AS c
MERGE (computer:Computer {sid:c.SID})
SET computer += c.Properties

// Local users
WITH c, computer
UNWIND c.LocalUsers AS lu
MERGE (localUser:LocalUser {name:lu.name, sid:lu.SID, computerName:computer.name})
MERGE (computer)-[:hasUser]->(localUser)

// Local groups
WITH c, computer
UNWIND c.LocalGroups AS lg
MERGE (localGroup:LocalGroup {name:lg.name, sid:lg.SID, computerName:computer.name})
MERGE (computer)-[:hasGroup]->(localGroup)

// Local group members
WITH lg, localGroup, computer
UNWIND lg.members AS mb
FOREACH (_ IN case when mb.type = 'LocalGroup' then [1] else [] end|
	MERGE (localSubGroup:LocalGroup {name:mb.name, sid:mb.SID, computerName:computer.name})
	MERGE (computer)-[:hasGroup]->(localSubGroup)
	MERGE (localGroup)-[:hasMember]->(localSubGroup)
)
FOREACH (_ IN case when mb.type = 'LocalUser' then [1] else [] end|
	MERGE (localUser:LocalUser {name:mb.name, sid:mb.SID, computerName:computer.name})
	MERGE (computer)-[:hasUser]->(localUser)
	MERGE (localGroup)-[:hasMember]->(localUser)
)
FOREACH (_ IN case when mb.type = 'DomainUser' then [1] else [] end|
	MERGE (domainUser:DomainUser {name:mb.name, sid:mb.SID})
	MERGE (localGroup)-[:hasMember]->(domainUser)
)
FOREACH (_ IN case when mb.type = 'DomainGroup' then [1] else [] end|
	MERGE (domainGroup:DomainGroup {name:mb.name, sid:mb.SID})
	MERGE (localGroup)-[:hasMember]->(domainGroup)
);

MATCH (n) RETURN n

#############
// Load computers and set all simple properties
MATCH (n) DETACH DELETE n;

CALL apoc.load.json("file:///0001-computers.json") YIELD value
UNWIND value.computers AS c
MERGE (computer:Computer {sid:c.SID})
SET computer += c.Properties

// Local users
WITH c, computer
UNWIND c.LocalUsers AS lu
MERGE (localUser:LocalUser {name:lu.name, sid:lu.SID, computerName:computer.name})
MERGE (localUser)-[:userOn]->(computer)

// Local groups
WITH c, computer
UNWIND c.LocalGroups AS lg
MERGE (localGroup:LocalGroup {name:lg.name, sid:lg.SID, computerName:computer.name})
MERGE (localGroup)-[:groupOn]->(computer)

// Local group members
WITH lg, localGroup, computer
UNWIND lg.members AS mb
FOREACH (_ IN case when mb.type = 'LocalGroup' then [1] else [] end|
	MERGE (localSubGroup:LocalGroup {name:mb.name, sid:mb.SID, computerName:computer.name})
	MERGE (localSubGroup)-[:groupOn]->(computer)
	MERGE (localSubGroup)-[:memberOf]->(localGroup)
)
FOREACH (_ IN case when mb.type = 'LocalUser' then [1] else [] end|
	MERGE (localUser:LocalUser {name:mb.name, sid:mb.SID, computerName:computer.name})
	MERGE (localUser)-[:userOn]->(computer)
	MERGE (localUser)-[:memberOf]->(localGroup)
)
FOREACH (_ IN case when mb.type = 'DomainUser' then [1] else [] end|
	MERGE (domainUser:DomainUser {name:mb.name, sid:mb.SID})
	MERGE (domainUser)-[:memberOf]->(localGroup)
)
FOREACH (_ IN case when mb.type = 'DomainGroup' then [1] else [] end|
	MERGE (domainGroup:DomainGroup {name:mb.name, sid:mb.SID})
	MERGE (domainGroup)-[:memberOf]->(localGroup)
);

MATCH (n) RETURN n







#CALL apoc.create.relationship(from, row.type, row.properties, to) yield rel